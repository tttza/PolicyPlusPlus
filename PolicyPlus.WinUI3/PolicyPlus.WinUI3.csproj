<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows10.0.19041.0</TargetFramework>
    <TargetPlatformMinVersion>10.0.19041.0</TargetPlatformMinVersion>
    <RootNamespace>PolicyPlus.WinUI3</RootNamespace>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <Platforms>x86;x64;ARM64</Platforms>
    <WindowsPackageType>None</WindowsPackageType>
    <UseWinUI>true</UseWinUI>
    <EnableMsixTooling>true</EnableMsixTooling>
    <Nullable>enable</Nullable>
    <WindowsAppSdkBootstrapInitialize>true</WindowsAppSdkBootstrapInitialize>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="Resources\ThemeColors.xaml" />
  </ItemGroup>

  <ItemGroup>
  </ItemGroup>

  <ItemGroup>
    <Manifest Include="$(ApplicationManifest)" />
  </ItemGroup>

  <!-- Embed any .ico in Assets so it is available even in single-file publish -->
  <ItemGroup>
    <EmbeddedResource Include="Assets\*.ico" />
  </ItemGroup>

  <!-- Set the EXE file icon if a known .ico exists -->
  <Choose>
    <When Condition="Exists('Assets\\AppIcon.ico')">
      <PropertyGroup>
        <ApplicationIcon>Assets\AppIcon.ico</ApplicationIcon>
      </PropertyGroup>
    </When>
    <When Condition="Exists('Assets\\app.ico')">
      <PropertyGroup>
        <ApplicationIcon>Assets\app.ico</ApplicationIcon>
      </PropertyGroup>
    </When>
    <When Condition="Exists('Assets\\icon.ico')">
      <PropertyGroup>
        <ApplicationIcon>Assets\icon.ico</ApplicationIcon>
      </PropertyGroup>
    </When>
    <When Condition="Exists('Assets\\PolicyPlus.ico')">
      <PropertyGroup>
        <ApplicationIcon>Assets\PolicyPlus.ico</ApplicationIcon>
      </PropertyGroup>
    </When>
    <When Condition="Exists('Assets\\PolicyPlusWinUI3.ico')">
      <PropertyGroup>
        <ApplicationIcon>Assets\PolicyPlusWinUI3.ico</ApplicationIcon>
      </PropertyGroup>
    </When>
  </Choose>

  <!--
    Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging
    Tools extension to be activated for this project even if the Windows App SDK Nuget
    package has not yet been restored.
  -->
  <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <ProjectCapability Include="Msix" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="CommunityToolkit.WinUI.Controls.Sizers" Version="8.2.250402" />
    <PackageReference Include="CommunityToolkit.WinUI.UI.Controls.DataGrid" Version="7.1.2" />
    <PackageReference Include="Microsoft.Windows.CsWinRT" Version="2.2.0" />
    <PackageReference Include="Microsoft.Windows.SDK.BuildTools" Version="10.0.26100.4948" />
    <PackageReference Include="Microsoft.WindowsAppSDK" Version="1.7.250606001">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\PolicyPlus.Core\PolicyPlus.Core.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Page Update="Resources\ThemeColors.xaml">
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Update="Dialogs\FindByRegistryDialog.xaml">
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Update="Dialogs\FindByIdDialog.xaml">
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Update="Dialogs\LanguageOptionsDialog.xaml">
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Update="Dialogs\ImportPolDialog.xaml">
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Update="Dialogs\ImportRegDialog.xaml">
      <Generator>MSBuild:Compile</Generator>
    </Page>
  </ItemGroup>

  <ItemGroup>
    <Page Remove="Windows\DetailPolicyFormattedWindow.xaml" />
    <Page Remove="Windows\PendingChangesWindow.xaml" />
    <Page Include="Windows\DetailPolicyFormattedWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
    </Page>
    <Page Include="Windows\PendingChangesWindow.xaml">
      <Generator>MSBuild:Compile</Generator>
    </Page>
  </ItemGroup>

  <!--
    Defining the "HasPackageAndPublishMenuAddedByProject" property here allows the Solution
    Explorer "Package and Publish" context menu entry to be enabled for this project even if
    the Windows App SDK Nuget package has not yet been restored.
  -->
  <PropertyGroup Condition="'$(DisableHasPackageAndPublishMenuAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <HasPackageAndPublishMenu>true</HasPackageAndPublishMenu>
  </PropertyGroup>

  <!-- Publish Properties -->
  <PropertyGroup>
    <PublishReadyToRun Condition="'$(Configuration)' == 'Debug'">False</PublishReadyToRun>
    <PublishReadyToRun Condition="'$(Configuration)' != 'Debug'">True</PublishReadyToRun>
    <PublishTrimmed Condition="'$(Configuration)' == 'Debug'">False</PublishTrimmed>
    <PublishTrimmed Condition="'$(Configuration)' != 'Debug'">True</PublishTrimmed>
  </PropertyGroup>
</Project>