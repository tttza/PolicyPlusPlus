name: build & release

on:
  push:
    tags:
      - '*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Override version (e.g., 2.0.0-alpha6). When set, this is used regardless of branch.'
        type: string
        required: false
      prerelease:
        description: 'Mark GitHub Release as pre-release (for manual runs)'
        type: boolean
        default: true

permissions:
  contents: write


jobs:
  pack-and-release:
    runs-on: windows-latest

    env:
      PACK_ID: dev.tttza.PolicyPlusPlus
      PACK_TITLE: Policy++
      PACK_AUTHORS: tttza.dev
      ENTRY_EXE: PolicyPlusPlus.exe
      PROJECT: PolicyPlusPlus/PolicyPlusPlus.csproj
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0        # Need full history so git describe works if fallback used
          fetch-tags: true      # Ensure tags are present for git describe

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Resolve version
        id: ver
        shell: bash
        env:
          INPUT_VERSION: ${{ inputs.version }}
        run: |
          # Mirror csproj logic: prefer git describe; fallback 'dev'.
          if [[ -n "${INPUT_VERSION}" ]]; then
            ver="${INPUT_VERSION}"
          else
            ver=$(git describe --tags --always --dirty 2>/dev/null || echo "")
            if [[ -z "${ver}" ]]; then
              ver="dev"
            fi
          fi
          echo "version=${ver}" >> $GITHUB_OUTPUT
          if [[ "${ver}" == *-* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi
          echo "tagref=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

      - name: Derive pack version (strip -dirty suffix only for packaging)
        id: packver
        shell: bash
        run: |
          original='${{ steps.ver.outputs.version }}'
          # Remove a trailing -dirty (git describe style) or .dirty variant if present
          packver=${original%-dirty}
          packver=${packver%.dirty}
          echo "packversion=${packver}" >> $GITHUB_OUTPUT

      - name: Publish (win-x64)
        run: >
          dotnet publish $env:PROJECT
          -c Release-Unpackaged
          -o publish/win-x64
          -r win-x64
          --self-contained true
          /p:GitVersionOverride=${{ steps.ver.outputs.version }}
        shell: pwsh

      - name: Publish (win-arm64)
        run: >
          dotnet publish $env:PROJECT
          -c Release-Unpackaged
          -o publish/win-arm64
          -r win-arm64
          --self-contained true
          /p:GitVersionOverride=${{ steps.ver.outputs.version }}
        shell: pwsh

      - name: Install vpk (Velopack CLI)
        run: dotnet tool install -g vpk
        shell: pwsh

      - name: Download previous release (if any)
        run: |
          vpk download github --repoUrl https://github.com/${{ github.repository }} || echo "no previous"
        shell: pwsh

      - name: vpk pack (x64)
        run: >
          vpk pack
          --packId $env:PACK_ID
          --packTitle "$env:PACK_TITLE"
          --packAuthors "$env:PACK_AUTHORS"
          --packVersion ${{ steps.packver.outputs.packversion }}
          --runtime win-x64
          --packDir publish/win-x64
          --mainExe $env:ENTRY_EXE
          --icon PolicyPlusPlus/Assets/AppIcon.ico
          -o Releases
          -c win-x64
        shell: pwsh

      - name: vpk pack (arm64)
        run: >
          vpk pack
          --packId $env:PACK_ID
          --packTitle "$env:PACK_TITLE"
          --packAuthors "$env:PACK_AUTHORS"
          --packVersion ${{ steps.packver.outputs.packversion }}
          --runtime win-arm64
          --packDir publish/win-arm64
          --mainExe $env:ENTRY_EXE
          --icon PolicyPlusPlus/Assets/AppIcon.ico
          -o Releases
          -c win-arm64
        shell: pwsh

      - name: Upload to GitHub Releases
        env:
          IS_PRERELEASE: ${{ inputs.prerelease != '' && inputs.prerelease || steps.ver.outputs.prerelease }}
        run: |
          $pre = "$env:IS_PRERELEASE"
          $tag = "${{ steps.ver.outputs.tagref }}"
          $name = "$env:PACK_TITLE ${{ steps.packver.outputs.packversion }}"
          $token = "$env:GITHUB_TOKEN"
          if ($pre -eq "true") {
            vpk upload github --token "$token" --repoUrl https://github.com/${{ github.repository }} --publish --pre --releaseName "$name" --tag "$tag" -c "win-x64" --merge
            vpk upload github --token "$token" --repoUrl https://github.com/${{ github.repository }} --publish --pre --releaseName "$name" --tag "$tag" -c "win-arm64" --merge
          } else {
            vpk upload github --token "$token" --repoUrl https://github.com/${{ github.repository }} --publish --releaseName "$name" --tag "$tag" -c "win-x64" --merge
            vpk upload github --token "$token" --repoUrl https://github.com/${{ github.repository }} --publish --releaseName "$name" --tag "$tag" -c "win-arm64" --merge
          }
        shell: pwsh
